#!/usr/bin/perl -w

# 2010-03-13 to 2010-03-17 mza @ uh idlab
# 2012-04-05 to 2012-04-09 mza
# 2013-06-18 to ?? mza (updated to exchange 2" and 4" slides)


use strict;
#BEGIN {
#	my $localdir = $ENV{0};
#	print $localdir . "\n";
#	$localdir =~ s/\/.*//;
#	print $localdir . "\n";
#	exit(0);
#}
use Tk;
use Tk::PNG;
use Tk::Photo;
use lib '/home/pilas/build/motor';
use motor_controller;
use debug_info_warning_error;
use parse_config_file;

#my $gui_has_been_instantiated = 0;

my $displayed_delay_in_picoseconds            = 0; # 0 to 1000
my $displayed_delay_in_picoseconds_scale      = 0; # 0 to 1000
#my $displayed_delay_slide_macrostep_position  = 0; # 0 to 20
my $displayed_filter_slide_macrostep_position = 0; # 0 to 4
my $displayed_x_position = 0;
my $displayed_y_position = 0;
my $borderwidth = 10;

my $delay_setting_precision_in_picoseconds = 1;
my $delay_setting_precision_in_macrosteps = $delay_setting_precision_in_picoseconds / $delay_slide_granularity_in_picoseconds;

my $window;
my ($button_delay_increment, $button_delay_decrement, $entry_delay_in_picoseconds);
my ($frame_for_delay_in_picoseconds, $entry_delay_units);
#my $label_delay_corresponding_to_number_of_desired_macrosteps;

my ($should_draw_filter_slide_frame, $should_draw_delay_slide_frame, $should_draw_x_frame, $should_draw_y_frame) = (1, 1, 1, 1);

my $width_of_image_in_pixels = 878;
my $height_of_image_in_pixels = 535;
my $offset_x_from_image00_to_screen00_in_pixels = 48;
my $offset_y_from_image00_to_screen00_in_pixels = 140;
my $image_dots_per_inch = 200;
my $image_dots_per_mm = $image_dots_per_inch / $number_of_millimeters_per_inch;
my $spot_width = 8;
my $spot_height = $spot_width;
my $scale_x_from_motor_to_screen_coordinates = 200 / $image_dots_per_mm;
my $scale_y_from_motor_to_screen_coordinates = 200 / $image_dots_per_mm;
my $offset_x_from_motor00_to_screen00_in_pixels = $width_of_image_in_pixels  - $offset_x_from_image00_to_screen00_in_pixels;
my $offset_y_from_motor00_to_screen00_in_pixels =                            + $offset_y_from_image00_to_screen00_in_pixels;

my ($padx, $pady) = (1, 1);
my $frame_canvas;

sub setup_main_window {
	info("setting up GUI");
	$window = new MainWindow(-title=>"PiLas motor controller");

	my $filter_slide_frame;
	my $delay_slide_frame;
	my $delay_slide_frame_1;
	my $delay_slide_frame_2;
	my $radiobutton_filter_label;
	my $scale_delay_in_picoseconds;
	my $button_go;
	my $button_reset_delay_slide;
	my $button_find_limits;
	my ($current_x_position_entry, $current_y_position_entry);
	my $default_color = "#d9d9d9";
	my ($filter_slide_frame_background_color, $delay_slide_frame_background_color) = ($default_color, $default_color);
	#$filter_slide_frame_background_color = "#efefef";
	#$delay_slide_frame_background_color = "#dfdfdf";
	my $frame_xy_slide_grid_background_color = "#d9d9d9";
	my $delay_slide_frame_label;
	my $xy_frame_label;

#	($should_draw_filter_slide_frame, $should_draw_delay_slide_frame, $should_draw_x_frame, $should_draw_y_frame) = (0, 0, 1, 1);
	if ($should_draw_filter_slide_frame) {
		$filter_slide_frame  = $window->Frame(-borderwidth=>$borderwidth, -background=>$filter_slide_frame_background_color, -relief=>"ridge");
		$radiobutton_filter_label = $filter_slide_frame->Label(-text=>"filter:", -background=>$filter_slide_frame_background_color);
		my ($radiobutton_filter_A, $radiobutton_filter_B, $radiobutton_filter_C, $radiobutton_filter_D, $radiobutton_filter_E);
		my ($radiobutton_filter_A_entry, $radiobutton_filter_B_entry, $radiobutton_filter_C_entry, $radiobutton_filter_D_entry, $radiobutton_filter_E_entry);
		$radiobutton_filter_A = $filter_slide_frame->Radiobutton(-text=>"1", -value=>0, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
		$radiobutton_filter_B = $filter_slide_frame->Radiobutton(-text=>"2", -value=>1, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
		$radiobutton_filter_C = $filter_slide_frame->Radiobutton(-text=>"3", -value=>2, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
		$radiobutton_filter_D = $filter_slide_frame->Radiobutton(-text=>"4", -value=>3, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
		$radiobutton_filter_E = $filter_slide_frame->Radiobutton(-text=>"5", -value=>4, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
		$radiobutton_filter_A_entry = $filter_slide_frame->Entry(-width=>6, -state=>"normal", -textvariable=>\$filter[1], -background=>$delay_slide_frame_background_color);
		$radiobutton_filter_B_entry = $filter_slide_frame->Entry(-width=>6, -state=>"normal", -textvariable=>\$filter[2], -background=>$delay_slide_frame_background_color);
		$radiobutton_filter_C_entry = $filter_slide_frame->Entry(-width=>6, -state=>"normal", -textvariable=>\$filter[3], -background=>$delay_slide_frame_background_color);
		$radiobutton_filter_D_entry = $filter_slide_frame->Entry(-width=>6, -state=>"normal", -textvariable=>\$filter[4], -background=>$delay_slide_frame_background_color);
		$radiobutton_filter_E_entry = $filter_slide_frame->Entry(-width=>6, -state=>"normal", -textvariable=>\$filter[5], -background=>$delay_slide_frame_background_color);
		$radiobutton_filter_label->grid(-row=>0, -column=>0, -columnspan=>2);
		$radiobutton_filter_A->grid(-row=>1, -column=>0);
		$radiobutton_filter_A_entry->grid(-row=>1, -column=>1);
		$radiobutton_filter_B->grid(-row=>2, -column=>0);
		$radiobutton_filter_B_entry->grid(-row=>2, -column=>1);
		$radiobutton_filter_C->grid(-row=>3, -column=>0);
		$radiobutton_filter_C_entry->grid(-row=>3, -column=>1);
		$radiobutton_filter_D->grid(-row=>4, -column=>0);
		$radiobutton_filter_D_entry->grid(-row=>4, -column=>1);
		$radiobutton_filter_E->grid(-row=>5, -column=>0);
		$radiobutton_filter_E_entry->grid(-row=>5, -column=>1);
		$filter_slide_frame->grid(-row=>0, -column=>0);
	}
	if ($should_draw_delay_slide_frame) {
		$delay_slide_frame                = $window->Frame(-borderwidth=>$borderwidth, -background=>$delay_slide_frame_background_color, -relief=>"ridge");
		$delay_slide_frame_1              = $delay_slide_frame->Frame(-background=>$delay_slide_frame_background_color);
		$delay_slide_frame_label          = $delay_slide_frame_1->Label(-text=>"delay:", -background=>$delay_slide_frame_background_color);
		$button_reset_delay_slide         = $delay_slide_frame_1->Button(-text=>"reset delay slide", -command=>\&reset_delay_slide, -background=>$delay_slide_frame_background_color);
		$button_delay_decrement           = $delay_slide_frame_1->Button(-text=>"decrease delay by 50ps",  -command=>\&decrease_delay_slide_by_one_granule, -background=>$delay_slide_frame_background_color);
		$entry_delay_in_picoseconds       = $delay_slide_frame_1->Entry(-width=>5, -state=>"normal", -textvariable=>\$displayed_delay_in_picoseconds, -background=>$delay_slide_frame_background_color);
		#, -validatecommand=>\&desired_delay_has_possibly_changed);
		$entry_delay_units                = $delay_slide_frame_1->Label(-text=>"ps", -background=>$delay_slide_frame_background_color);
		$button_delay_increment           = $delay_slide_frame_1->Button(-text=>"increase delay by 50ps",  -command=>\&increase_delay_slide_by_one_granule, -background=>$delay_slide_frame_background_color);
	#	$button_find_limits               = $delay_slide_frame_1->Button(-text=>"find limits of motion",  -command=>\&get_limits_of_motion, -background=>$delay_slide_frame_background_color);
		
	$delay_slide_frame_2   = $delay_slide_frame->Frame(-background=>$delay_slide_frame_background_color);
		$scale_delay_in_picoseconds       = $delay_slide_frame_2->Scale(-orient=>"h", -digit=>1, -variable=>\$displayed_delay_in_picoseconds_scale, -from=>0, -to=>1000, -tickinterval=>250, -command=>\&desired_delay_has_possibly_changed, -length=>325, -resolution=>50, -background=>$delay_slide_frame_background_color);
		# -bigincrement=>3 -label=>"delay", 
	#	$scale_delay_in_picoseconds       = $delay_slide_frame_2->Scale(-label=>"delay", -orient=>"v", -digit=>1, -variable=>\$displayed_delay_in_picoseconds, -from=>\$motor_controller::smallest_delay_in_ps, -to=>\$motor_controller::largest_delay_in_ps, -tickinterval=>\$motor_controller::delay_slide_granularity_in_picoseconds);
	#	$label_delay_corresponding_to_number_of_desired_macrosteps = $delay_slide_frame_2->Label(-text=>"", -width=>10);
		$button_go                        = $delay_slide_frame_2->Button(-text=>"go", -command=>\&predicate_new_desired_delay_in_picoseconds_scale, -background=>$delay_slide_frame_background_color);

		$scale_delay_in_picoseconds->grid    (-row=>0, -column=>0, -columnspan=>3);
#		$label_delay_corresponding_to_number_of_desired_macrosteps->grid(-row=>0, -column=>3);
		$button_go->grid                     (-row=>0, -column=>4);
		$delay_slide_frame_label->grid       (-row=>0, -column=>0, -columnspan=>5);
		$button_reset_delay_slide->grid      (-row=>1, -column=>0);
		$button_delay_decrement->grid        (-row=>1, -column=>1);
		$entry_delay_in_picoseconds->grid    (-row=>1, -column=>2);
		$entry_delay_units->grid             (-row=>1, -column=>3);
		$button_delay_increment->grid        (-row=>1, -column=>4);
#		$button_find_limits->grid            (-row=>1, -column=>5);
		$delay_slide_frame_1->grid(-row=>0, -column=>0);
		$delay_slide_frame_2->grid(-row=>1, -column=>0);
		$delay_slide_frame->grid (-row=>0, -column=>1, -rowspan=>2);
		$entry_delay_in_picoseconds->bind('<Return>', \&predicate_new_desired_delay_in_picoseconds);
	}
	my $frame_xy_slide_grid;
	if ($should_draw_x_frame && $should_draw_y_frame) {
		$frame_xy_slide_grid = $window->Frame(-borderwidth=>$borderwidth, -background=>$frame_xy_slide_grid_background_color, -relief=>"ridge");
		$xy_frame_label = $frame_xy_slide_grid->Label(-text=>"xy position:", -background=>$filter_slide_frame_background_color);
#		my $frame_xy_slide_grid_get_out_of_way_button  = $frame_xy_slide_grid->Button(-text=>"save x position and get out of way of PMT",  -command=>\&save_position_and_move_x_slide_out_of_way_and_update_display, -background=>$frame_xy_slide_grid_background_color);
		my $save_position_and_go_to_motor_endstops_button = $frame_xy_slide_grid->Button(-text=>"save position and get out of way of PMT",  -command=>\&save_position_and_go_to_motor_endstops_and_update_display, -background=>$frame_xy_slide_grid_background_color, -padx=>$padx, -pady=>$pady);
		my $restore_position_button = $frame_xy_slide_grid->Button(-text=>"restore position",  -command=>\&restore_position_and_update_display, -background=>$frame_xy_slide_grid_background_color, -padx=>$padx, -pady=>$pady);
		my $call_this_home_button = $frame_xy_slide_grid->Button(-text=>"call current position 0,0",  -command=>\&call_this_home_and_update_display, -background=>$frame_xy_slide_grid_background_color, -padx=>$padx, -pady=>$pady);
 
#		my $frame_xy_slide_grid_restore_position_button = $frame_xy_slide_grid->Button(-text=>"restore x position",  -command=>\&restore_position_of_x_slide_and_update_display, -background=>$frame_xy_slide_grid_background_color);
#		my $frame_xy_slide_grid_right_button = $frame_xy_slide_grid->Button(-text=>"right", -command=>[\&move_xy_slide, +1,  0], -background=>$frame_xy_slide_grid_background_color);
#		my $frame_xy_slide_grid_left_button  = $frame_xy_slide_grid->Button(-text=>"left",  -command=>[\&move_xy_slide, -1,  0], -background=>$frame_xy_slide_grid_background_color);
#		my $frame_xy_slide_grid_up_button    = $frame_xy_slide_grid->Button(-text=>"up",    -command=>[\&move_xy_slide,  0, +1], -background=>$frame_xy_slide_grid_background_color);
#		my $frame_xy_slide_grid_down_button  = $frame_xy_slide_grid->Button(-text=>"down",  -command=>[\&move_xy_slide,  0, -1], -background=>$frame_xy_slide_grid_background_color);
		my $go_home_button = $frame_xy_slide_grid->Button(-text=>"go to 0,0",  -command=>\&go_home_and_update_display, -background=>$frame_xy_slide_grid_background_color, -padx=>$padx, -pady=>$pady);
#		if (1) {
			info("image dots per mm = " . $image_dots_per_mm);
			$frame_canvas = $frame_xy_slide_grid->Canvas(-width=>$width_of_image_in_pixels, -height=>$height_of_image_in_pixels);
			my $image = $frame_canvas->Photo(-format=>"png", -file => "SL10s-on-front-front-board.png", -width=>$width_of_image_in_pixels, -height=>$height_of_image_in_pixels);
			$frame_canvas->create('image', 0, 0, '-anchor' => 'nw', '-image' => $image);
#			$frame_canvas->Tk::bind('<ButtonRelease-1>', \&grid_button_release);
#			plot_spot();
#		}
	my $update_display_button = $window->Button(-text=>"update display", -command=>\&update_display, -padx=>$padx, -pady=>$pady);
	#if ($should_draw_xy_position_frame) {
		my $xy_position_frame = $frame_xy_slide_grid->Frame(-borderwidth=>$borderwidth);
		my $current_xy_position_label = $xy_position_frame->Label(-text=>"current xy position:");
		$current_x_position_entry = $xy_position_frame->Entry(-width=>5, -state=>"normal", -textvariable=>\$displayed_x_position);
		$current_y_position_entry = $xy_position_frame->Entry(-width=>5, -state=>"normal", -textvariable=>\$displayed_y_position);
		$current_xy_position_label->grid(-row=>0, -column=>0);
		$current_x_position_entry->grid (-row=>0, -column=>1);
		$current_y_position_entry->grid (-row=>0, -column=>2);

		my ($xy_frame_single_step, $xy_frame_small_step, $xy_frame_anode_step, $xy_frame_PMT_step);
		my ($xy_frame_single_step_label, $xy_frame_small_step_label, $xy_frame_anode_step_label, $xy_frame_PMT_step_label);
		my $xy_buttons = $frame_xy_slide_grid->Frame(-borderwidth=>$borderwidth);
		$xy_frame_PMT_step    = $xy_buttons->Frame(-borderwidth=>12, -relief=>"ridge");
		$xy_frame_anode_step  = $xy_buttons->Frame(-borderwidth=>12, -relief=>"ridge");
		$xy_frame_small_step  = $xy_buttons->Frame(-borderwidth=>12, -relief=>"ridge");
		$xy_frame_single_step = $xy_buttons->Frame(-borderwidth=>12, -relief=>"ridge");
		$xy_frame_single_step_label = $xy_frame_single_step->Label(-text=>"single step");
		$xy_frame_small_step_label  = $xy_frame_small_step->Label(-text=>"small step");
		$xy_frame_anode_step_label  = $xy_frame_anode_step->Label(-text=>"anode");
		$xy_frame_PMT_step_label    = $xy_frame_PMT_step->Label(-text=>"PMT");
		my $xy_frame_single_step_right_button = $xy_frame_single_step->Button(-text=>"right", -command=>[\&move_NM_single_steps_in_xy_and_update_display, -1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_single_step_left_button  = $xy_frame_single_step->Button(-text=>"left",  -command=>[\&move_NM_single_steps_in_xy_and_update_display, +1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_single_step_up_button    = $xy_frame_single_step->Button(-text=>"up",    -command=>[\&move_NM_single_steps_in_xy_and_update_display,  0, -1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_single_step_down_button  = $xy_frame_single_step->Button(-text=>"down",  -command=>[\&move_NM_single_steps_in_xy_and_update_display,  0, +1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_small_step_right_button = $xy_frame_small_step->Button(-text=>"right", -command=>[\&move_NM_small_steps_in_xy_and_update_display, -1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_small_step_left_button  = $xy_frame_small_step->Button(-text=>"left",  -command=>[\&move_NM_small_steps_in_xy_and_update_display, +1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_small_step_up_button    = $xy_frame_small_step->Button(-text=>"up",    -command=>[\&move_NM_small_steps_in_xy_and_update_display,  0, -1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_small_step_down_button  = $xy_frame_small_step->Button(-text=>"down",  -command=>[\&move_NM_small_steps_in_xy_and_update_display,  0, +1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_anode_step_right_button = $xy_frame_anode_step->Button(-text=>"right", -command=>[\&move_NM_anodes_in_xy_and_update_display, -1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_anode_step_left_button  = $xy_frame_anode_step->Button(-text=>"left",  -command=>[\&move_NM_anodes_in_xy_and_update_display, +1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_anode_step_up_button    = $xy_frame_anode_step->Button(-text=>"up",    -command=>[\&move_NM_anodes_in_xy_and_update_display,  0, -1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_anode_step_down_button  = $xy_frame_anode_step->Button(-text=>"down",  -command=>[\&move_NM_anodes_in_xy_and_update_display,  0, +1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_PMT_step_right_button = $xy_frame_PMT_step->Button(-text=>"right", -command=>[\&move_NM_PMTs_in_xy_and_update_display, -1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_PMT_step_left_button  = $xy_frame_PMT_step->Button(-text=>"left",  -command=>[\&move_NM_PMTs_in_xy_and_update_display, +1,  0], -padx=>$padx, -pady=>$pady);
		my $xy_frame_PMT_step_up_button    = $xy_frame_PMT_step->Button(-text=>"up",    -command=>[\&move_NM_PMTs_in_xy_and_update_display,  0, -1], -padx=>$padx, -pady=>$pady);
		my $xy_frame_PMT_step_down_button  = $xy_frame_PMT_step->Button(-text=>"down",  -command=>[\&move_NM_PMTs_in_xy_and_update_display,  0, +1], -padx=>$padx, -pady=>$pady);

		$update_display_button->grid(-row=>1, -column=>0);
		$frame_xy_slide_grid->grid(-row=>2, -column=>0, -columnspan=>2);

		$xy_frame_label->grid                               (-row=>0, -column=>0, -columnspan=>5);
		$xy_position_frame->grid                            (-row=>1, -column=>0);
		$go_home_button->grid                               (-row=>1, -column=>1);
		$save_position_and_go_to_motor_endstops_button->grid(-row=>1, -column=>2);
		$restore_position_button->grid                      (-row=>1, -column=>3);
		$call_this_home_button->grid                        (-row=>1, -column=>4);
#		$frame_xy_slide_grid_get_out_of_way_button->grid    (-row=>1, -column=>2);
#		$frame_xy_slide_grid_restore_position_button->grid  (-row=>1, -column=>3);
		$xy_buttons->grid                                   (-row=>2, -column=>0, -columnspan=>5);
		$frame_canvas->grid                                 (-row=>3, -column=>0, -columnspan=>5);
#		$frame_xy_slide_grid_left_button->grid (-row=>1, -column=>3+0);
#		$frame_xy_slide_grid_right_button->grid(-row=>1, -column=>3+2);
#		$frame_xy_slide_grid_up_button->grid   (-row=>0, -column=>3+1);
#		$frame_xy_slide_grid_down_button->grid (-row=>2, -column=>3+1);
		$xy_frame_single_step_left_button->grid (-row=>1, -column=>0);
		$xy_frame_single_step_right_button->grid(-row=>1, -column=>2);
		$xy_frame_single_step_up_button->grid   (-row=>0, -column=>1);
		$xy_frame_single_step_down_button->grid (-row=>2, -column=>1);
		$xy_frame_single_step_label->grid       (-row=>1, -column=>1);
		$xy_frame_small_step_left_button->grid (-row=>1, -column=>0);
		$xy_frame_small_step_right_button->grid(-row=>1, -column=>2);
		$xy_frame_small_step_up_button->grid   (-row=>0, -column=>1);
		$xy_frame_small_step_down_button->grid (-row=>2, -column=>1);
		$xy_frame_small_step_label->grid       (-row=>1, -column=>1);
		$xy_frame_anode_step_left_button->grid (-row=>1, -column=>0);
		$xy_frame_anode_step_right_button->grid(-row=>1, -column=>2);
		$xy_frame_anode_step_up_button->grid   (-row=>0, -column=>1);
		$xy_frame_anode_step_down_button->grid (-row=>2, -column=>1);
		$xy_frame_anode_step_label->grid       (-row=>1, -column=>1);
		$xy_frame_PMT_step_left_button->grid (-row=>1, -column=>0);
		$xy_frame_PMT_step_right_button->grid(-row=>1, -column=>2);
		$xy_frame_PMT_step_up_button->grid   (-row=>0, -column=>1);
		$xy_frame_PMT_step_down_button->grid (-row=>2, -column=>1);
		$xy_frame_PMT_step_label->grid       (-row=>1, -column=>1);
		$xy_frame_single_step->grid(-row=>0, -column=>3);
		$xy_frame_small_step->grid( -row=>0, -column=>2);
		$xy_frame_anode_step->grid( -row=>0, -column=>1);
		$xy_frame_PMT_step->grid(   -row=>0, -column=>0);
#	}
	}
	$window->bind('<Key-Escape>', \&quit);
	info("finished setting up GUI");
}

sub go_home_and_update_display { go_home(); update_display(); }

sub move_NM_single_steps_in_xy_and_update_display { my ($x, $y) = @_; move_NM_single_steps_in_xy($x, $y); update_display(); }
sub move_NM_small_steps_in_xy_and_update_display  { my ($x, $y) = @_; move_NM_small_steps_in_xy($x, $y);  update_display(); }
sub move_NM_anodes_in_xy_and_update_display       { my ($x, $y) = @_; move_NM_anodes_in_xy($x, $y);       update_display(); }
sub move_NM_PMTs_in_xy_and_update_display         { my ($x, $y) = @_; move_NM_PMTs_in_xy($x, $y);         update_display(); }

my ($old_x_position_of_spot, $old_y_position_of_spot) = (0, 0);
sub plot_spot {
	my ($x, $y) = ($old_x_position_of_spot, $old_y_position_of_spot);
	if ($x != 0 && $y != 0) {
		$frame_canvas->createOval($x-$spot_width/2, $y-$spot_height/2, $x+$spot_width/2, $y+$spot_height/2, -fill=>'black', -outline=>'black');
	}
	$x = $displayed_x_position / $scale_x_from_motor_to_screen_coordinates + $offset_x_from_motor00_to_screen00_in_pixels;
	$y = $displayed_y_position / $scale_y_from_motor_to_screen_coordinates + $offset_y_from_motor00_to_screen00_in_pixels;
	if ($x < $spot_width/2) { $x = $spot_width/2; }
	if ($x > $width_of_image_in_pixels-$spot_width/2) { $x = $width_of_image_in_pixels-$spot_width/2; }
	if ($y < $spot_height/2+2) { $y = $spot_height/2+2; }
	if ($y > $height_of_image_in_pixels-$spot_height/2) { $y = $height_of_image_in_pixels-$spot_height/2; }
	info("current x position (in motor steps) = " . $displayed_x_position);
	info("current x position (in pixels) = " . $x);
	info("current y position (in motor steps) = " . $displayed_y_position);
	info("current y position (in pixels) = " . $y);
	$frame_canvas->createOval($x-$spot_width/2, $y-$spot_height/2, $x+$spot_width/2, $y+$spot_height/2, -fill=>'blue', -outline=>'blue');
	($old_x_position_of_spot, $old_y_position_of_spot) = ($x, $y);
}

sub call_this_home_and_update_display { call_this_home(); update_display(); }
sub save_position_and_go_to_motor_endstops_and_update_display { save_position_and_go_to_motor_endstops(); update_display(); }
sub restore_position_and_update_display { restore_position(); update_display(); }
#sub save_position_and_move_x_slide_out_of_way_and_update_display { save_position_and_move_x_slide_out_of_way(); update_display(); }
#sub restore_position_of_x_slide_and_update_display { restore_position_of_x_slide(); update_display(); }

sub move_xy_slide {
	my ($delta_x, $delta_y) = @_;
#	print "($delta_x, $delta_y)\n";
	move_xy_slide_to_granular_relative_position($delta_x, $delta_y);
}

sub grid_button_release {
	my ($widget) = @_;
	my $event = $widget->XEvent;
	my ($screen_x, $screen_y, $window_x, $window_y) = ($event->X, $event->Y, $event->x, $event->y);
#	print "grid button release @ " . $x . "x" . $y . "+" . $w . "+" . $h . "\n";
#	print "grid button release @ " . $screen_x . "x" . $screen_y . "+" . $window_x . "+" . $window_y . "\n";
	print "grid button release @ " . $window_x . "x" . $window_y . "\n";
	my ($x_offset, $x_gain, $y_offset, $y_gain) = (59, 25.0, 57, 25.0);
	my $x = ($window_x - $x_offset) / $x_gain;
	my $y = ($window_y - $y_offset) / $y_gain;
#	print "($window_x, $window_y) -> [$x,$y]\n";
	if (0.0 < $x && $x < 8.0 && 0.0 < $y && $y < 8.0) {
		$x = int($x);
		$y = int($y);
		print "[$x,$y]\n";
	}
}

sub quit {
	exit(0);
}

sub increase_delay_slide_by_one_granule {
	increase_delay_slide_by_one_macrostep();
	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
}

sub decrease_delay_slide_by_one_granule {
	decrease_delay_slide_by_one_macrostep();
	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
}

sub reset_delay_slide {
	bring_delay_slide_to_beginning();
	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
}

sub desired_delay_has_possibly_changed {
	my $current_delay = current_delay_in_picoseconds();
	if ($delay_setting_precision_in_picoseconds <= abs($displayed_delay_in_picoseconds - $current_delay)) {
#		print "desired delay in picoseconds has changed\n";
		info("current delay = " . $current_delay . " ps");
		info("desired delay = " . $displayed_delay_in_picoseconds . " ps");
		update_delay_in_picoseconds_scale();
	}
	my $current_delay_macrostep_position = current_macrostep_position_of_delay_slide();
#	if ($delay_setting_precision_in_macrosteps <= abs($displayed_delay_slide_macrostep_position - $current_delay_macrostep_position)) {
#	if ($displayed_delay_slide_macrostep_position != current_whole_macrostep_position_of_delay_slide()) {
#		print "desired delay slide position has changed\n";
#		info("current delay slide position = " . delay_macrosteps_steps_and_picoseconds_from_macrosteps(current_whole_macrostep_position_of_delay_slide()));
#		info("desired delay slide position = " . delay_macrosteps_steps_and_picoseconds_from_macrosteps($displayed_delay_slide_macrostep_position));
#		update_label_delay_corresponding_to_number_of_desired_macrosteps();
#	}
}

#sub update_label_delay_corresponding_to_number_of_desired_macrosteps {
#	my $delay_in_picoseconds = absolute_macrosteps_to_absolute_picoseconds($displayed_delay_slide_macrostep_position);
#	$label_delay_corresponding_to_number_of_desired_macrosteps->configure(-text=>$delay_in_picoseconds . " ps");
#}

sub predicate_new_desired_delay_in_picoseconds {
	move_delay_slide_to_this_delay_in_picoseconds($displayed_delay_in_picoseconds);
	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
}

sub predicate_new_desired_delay_in_picoseconds_scale {
	$displayed_delay_in_picoseconds = $displayed_delay_in_picoseconds_scale;
	predicate_new_desired_delay_in_picoseconds();
}

#sub predicate_new_desired_delay_in_macrosteps {
#	move_delay_slide_to_macrostep_position($displayed_delay_slide_macrostep_position);
#	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
#}

sub filter_slide_radiobutton_clicked {
#filter_macrosteps_and_steps_from_macrosteps(current_macrostep_position_of_filter_slide())
#	print "$displayed_filter_macrostep_slide_position, $current_filter_slide_macrostep_position\n";
	if ($displayed_filter_slide_macrostep_position != current_macrostep_position_of_filter_slide()) {
		#if ($displayed_filter_slide_macrostep_position == 0) {
#			move_filter_slide_to_macrostep_position($displayed_filter_slide_macrostep_position);
		#	bring_filter_slide_to_beginning();
		#} else {
			move_filter_slide_to_macrostep_position($displayed_filter_slide_macrostep_position);
		#}
	}
}

sub update_delay_in_picoseconds_scale {
	$displayed_delay_in_picoseconds_scale = $displayed_delay_in_picoseconds;
}

sub update_delay_in_picoseconds {
	my ($new_delay_in_picoseconds) = @_; 
	$displayed_delay_in_picoseconds       = $new_delay_in_picoseconds;
	update_delay_in_picoseconds_scale();
}

sub update_current_xy_positions {
	my $actual_x_position = get_current_absolute_x_position();
	if ($displayed_x_position != $actual_x_position) {
		$displayed_x_position = $actual_x_position;
	}
	my $actual_y_position = get_current_absolute_y_position();
	if ($displayed_y_position != $actual_y_position) {
		$displayed_y_position = $actual_y_position;
	}
}

sub every_once_in_a_while {
	update_display();
}

sub update_display {
	update_delay_in_picoseconds(current_delay_in_whole_picoseconds());
	update_current_xy_positions();
	plot_spot();
}

#get_limits_of_motion(); quit(7);

parse_config_file(".config");
setup_main_window();
#update_current_xy_positions();
#every_once_in_a_while();
update_display();
$displayed_filter_slide_macrostep_position = current_macrostep_position_of_filter_slide();
#plot_spot();
#update_label_delay_corresponding_to_number_of_desired_macrosteps();

#my $timeout_in_milliseconds = 1000;
#my $timer_callback = Tk::After->new($window, $timeout_in_milliseconds, 'repeat', \&every_once_in_a_while);

MainLoop;
#bring_filter_slide_to_beginning();
#current_position_of_filter_slide();

